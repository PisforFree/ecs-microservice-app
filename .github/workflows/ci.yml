name: App CI â€” build, push, publish digest

on:
  pull_request:
    branches: [dev, main]
    paths:
      - "app/**"
      - "Dockerfile"
      - ".github/workflows/ci.yml"
  push:
    branches: [dev, main]
    paths:
      - "app/**"
      - "Dockerfile"
      - ".github/workflows/ci.yml"

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION:        ${{ secrets.AWS_REGION }}
  AWS_ROLE_TO_ASSUME:${{ secrets.AWS_ROLE_TO_ASSUME }}
  ECR_REPO:          ${{ secrets.ECR_REPO }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ env.AWS_ROLE_TO_ASSUME }}
          role-session-name: app-ci

      - name: Get AWS Account ID
        id: acct
        run: |
          echo "id=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Login to ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image URI
        id: image
        run: |
          IMAGE_URI="${{ steps.acct.outputs.id }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPO }}"
          echo "uri=$IMAGE_URI" >> $GITHUB_OUTPUT

      # Build + push only on push events (PRs will build/scan later without pushing)
      - name: Build and push image (tag = commit SHA)
        if: github.event_name == 'push'
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -t "${{ steps.image.outputs.uri }}:${{ github.sha }}" \
            --push \
            .

      # Resolve the digest from ECR for the just-pushed tag
      - name: Resolve image digest from ECR
        if: github.event_name == 'push'
        id: digest
        run: |
          DIGEST=$(aws ecr describe-images \
            --repository-name "${{ env.ECR_REPO }}" \
            --image-ids imageTag="${{ github.sha }}" \
            --query 'imageDetails[0].imageDigest' \
            --output text)
          echo "digest=$DIGEST" >> $GITHUB_OUTPUT
          echo "IMAGE: ${{ steps.image.outputs.uri }}@${DIGEST}"

      # Save digest to an artifact (for auditing / downstream jobs)
      - name: Upload digest artifact
        if: github.event_name == 'push'
        uses: actions/upload-artifact@v4
        with:
          name: image-digest
          path: |
            digest.txt
        env:
          D: ${{ steps.digest.outputs.digest }}
        shell: bash
        run: |
          echo "${D}" > digest.txt

      # Echo outputs for easy copy/paste (useful while wiring the next step)
      - name: Summary
        if: github.event_name == 'push'
        run: |
          echo "IMAGE_URI=${{ steps.image.outputs.uri }}"
          echo "IMAGE_DIGEST=${{ steps.digest.outputs.digest }}"
